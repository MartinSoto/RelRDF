2006-01-23  Martin Soto  <martinsoto@users.sourceforge.net>

	* serql/serql.g (uri, query, namespaceList, namespace)
	(prefixName): Parse the USING NAMESPACE clause.

	* serql/parser.py (QName): New class for qualified name nodes.
	(Parser.__slots__, Parser.__init__, Parser.initLocalPrefixes) 
	(Parser.createLocalPrefix, Parser.getPrefixUri) 
	(Parser.resolveQName, Parser.expandQNames.operation) 
	(Parser.checkPrefix): Add support for query-defined namespace
	prefixes.

2006-01-20  Martin Soto  <martinsoto@users.sourceforge.net>

	* serql/environment.py (ParseEnvironment.parse): Convert ANTLR
	exceptions into serql module exceptions.

	* serql/error.py (Error, PositionError, SyntaxError) 
	(SemanticError): New classes to report parsing errors.

	* serql/serql.g: Deactivate default error handler.
	(var): Store location information into the Var object.

	* serql/parser.py (LocationNode, Var) 
	(SelectContext.expandVariables.operation): Extend variable nodes to
	have location info. Use that info to produce adequate unbound
	variable errors.

2006-01-20  Martin Soto  <martinsoto@users.sourceforge.net>

	* serql/__init__.py: Export only the parser environment.

	* serql/environment.py: New entry point for SerQL parsing,
	encapsulating parsing and expression simplification.

	* serql/parser.py (Parser.basePrefixes, Parser.getPrefixUri) 
	(Parser.resolveQName): Make the complete prefix table public and
	implement a two level lookup scheme for prefixes. Prefixes are now
	searched in the external 'prefixes' table, and, if not found, in
	the set of SerQL predefined prefixes.
	(__repr__, setPrefix): Deleted.

	* serql/serql.g (query): Add main production with simplified
	definition.

2006-01-20  Martin Soto  <martinsoto@users.sourceforge.net>

	* serql/serql.g (selectQuery, var, uri): 
	* serql/parser.py (Var, expandVariables.operation)
	(Parser.__slots__, Parser.__init__, Parser.setPrefix)
	(Parser.getPrefixUri, Parser.getPrefixes, Parser.resolveQName)
	(Parser.__repr__, Parser.exprFromTriple, Parser.exprFromPattern): 
	serql.py renamed to parser.py. query.Query class merged into
	Parser class. query.py deleted.

2006-01-20  Martin Soto  <martinsoto@users.sourceforge.net>

	* serql/error.py: New module for exception classes.

2006-01-19  Martin Soto  <martinsoto@users.sourceforge.net>

	* serql/serql.py: 
	* serql/serql.g: 
	* serql/query.py: 
	* expression/rewrite.py: 
	Rename "tree" module to "expression" and and its "expression"
	submodule to "nodes" (doh!)

2006-01-19  Martin Soto  <martinsoto@users.sourceforge.net>

	* tree/expression.py (UnaryOperation, BinaryOperation, LessThan) 
	(LessThanOrEqual, GreaterThan, GreaterThanOrEqual, Or, Not): 
	* serql/serql.py (Parser.selectQueryExpr): 
	* serql/serql.g (selectQuery, booleanExpr, andExpr)
	(booleanElem, compOp, varOrValue, value):
	Parse the WHERE clause in the SELECT statement with a limited set
	of valid expressions, and produce a corresponding expression tree.

2006-01-18  Martin Soto  <martinsoto@users.sourceforge.net>

	* tree/expression.py (Map, NameColumns): 
	* serql/serql.py (SelectContext.expandVariables) 
	(Parser.graphPatternExpr): 
	* serql/serql.g (selectQuery, projection, projectionElem):
	Parse a simplified version of the SELECT statement a produce a
	corresponding expression tree, with value mapping and named
	columns.

2006-01-17  Martin Soto  <martinsoto@users.sourceforge.net>

	* tree/expression.py (Operation, Comparison, Equal, Different) 
	(BooleanOperation, And): Don't specify operators as parameters,
	use new node classes instead.

	* tree/rewrite.py (promoteSelect.operation) 
	(flattenSelect.operation): 
	* serql/serql.py (SelectContext.getCondition) 
	(Parser.exprFromTriple): 
	Adapt to the new node classes.

2006-01-17  Martin Soto  <martinsoto@users.sourceforge.net>

	* tree/rewrite.py (promoteSelect, flattenSelect): New
	simplification operations.

2006-01-17  Martin Soto  <martinsoto@users.sourceforge.net>

	* tree/rewrite.py (remakeExpr, treeMatchApply.operationWrapper) 
	(flattenAssoc.operation): Factor expression rebuild.

2006-01-17  Martin Soto  <martinsoto@users.sourceforge.net>

	* tree/rewrite.py (treeMatchApply): New apply operation for
	transformations that only affect a particular node type.
	(flattenAssoc): Implement based on treeMatchApply.

2006-01-17  Martin Soto  <martinsoto@users.sourceforge.net>

	* tree/rewrite.py (treeApply, flattenAssoc.operation): Return a
	tuple containing the transformed expression and a boolean value
	indicating whether the expression was changed or not.

2006-01-17  Martin Soto  <martinsoto@users.sourceforge.net>

	* tree/rewrite.py: New module for expression rewriting
	operations.

	* tree/expression.py (ExpressionNode.copyNode, Uri.copyNode) 
	(Literal.copyNode, FieldRef.copyNode, Operation.copyNode) 
	(Relation.copyNode, Optional.copyNode, Select.copyNode) 
	(Project.copyNode): Add a copyNode method to expression nodes to
	copy the main node and replace the subexpressions,

	* serql/serql.py (curry): Moved to new rewrite module.

2006-01-17  Martin Soto  <martinsoto@users.sourceforge.net>

	* tree/expression.py (NodeTypes, ExpressionNode.__slots__) 
	(ExpressionNode.__init__, getType, ExpressionNode.prettyPrint) 
	(NotSupported.__init__, Literal.__init__, Uri.__init__) 
	(FieldRef.__init__, Operation.__init__, Comparison.__init__) 
	(BooleanOperation.__init__, Relation.__init__, Optional.__init__) 
	(Product.__init__, Select.__init__, Project.__init__): 
	* serql/serql.py (Parser.exprFromTriple, Parser.exprFromPattern): 
	* serql/query.py (NodeTypes, Var.__init__): 
	Get rid of enumerated node types and resort to actual classes and
	isinstance instead.

2006-01-16  Martin Soto  <martinsoto@users.sourceforge.net>

	* tree/enum.py:
	* serql/serql-parse.py:
	* serql/query.py:
	* serql/serql.g:
	* serql/serql.py:
	* tree/expression.py:
	* serql/__init__.py:
	* serql/sample.serql:
	* tree/__init__.py:
	* tree/literal.py:
	* tree/uri.py:
	Extend translator to produce relational expression trees from a
	subset of SerQL.

2006-01-11  Martin Soto  <martinsoto@users.sourceforge.net>

	* enum.py: Added typed slightly adapted version of Zoran
	Isailovski's enumeration module:
	http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/413486

