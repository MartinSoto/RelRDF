#
# Schema Definition
#

table statements (
  id xsd:unsignedInt notNull autoIncrement,
  hash xsd:hexBinary notNull,
  subject xsd:string notNull,
  predicate xsd:string notNull,
  object_type xsd:unsignedShort notNull,
  object xsd:string notNull
);

index statements_primary statements (id) primary unique;
index statements_unique statements (hash) unique;
index statements_subject_index statements (subject);
index statements_predicate_index statements (predicate);


table data_types (
  id xsd:unsignedShort notNull autoIncrement,
  uri xsd:string notNull
);

index data_types_primary data_types (id) primary unique;
index data_types_unique data_types (uri) unique;


table version_statement (
  version_id xsd:unsignedInt notNull,
  stmt_id xsd:int notNull
);

index version_statement_primary version_statement (stmt_id) primary unique;
index version_statement_unique version_statement (version_id, stmt_id) unique;


def uriValue($uri) 
  valuemapping (
    inttoext($int) concat($uri, $int)
    exttoint($ext) if(substring($ext, 1, length($uri)) = $uri,
                      substring($ext, length($uri) + 1),
                      "<<<NO VALUE>>>")
  );

def refVersion($numExpr) Ref(uriValue(relrdf:version), $numExpr);


mapping allVersions()
  default
    mapto (refVersion(vs.version_id) as context,
	   1 as type__context,
	   s.subject as subject,
	   1 as type__subject,
	   s.predicate as predicate,
	   1 as type__predicate,
	   s.object as object,
	   s.object_type as type__object)
      version_statement vs cross statements s on vs.stmt_id = s.id;


mapping singleVersion($versionId)
  default
    mapto (refVersion(vs.version_id) as context,
	   1 as type__context,
	   s.subject as subject,
	   1 as type__subject,
	   s.predicate as predicate,
	   1 as type__predicate,
	   s.object as object,
	   s.object_type as type__object)
      version_statement vs cross statements s
      on vs.version_id = $versionId && vs.stmt_id = s.id;

