/* -*- ANTLR -*- */

/* Original grammar from the documentation, in ANTLR syntax. */

query
    :   tableQuerySet (namespaceList)?
    |   graphQuerySet (namespaceList)?
    ;

namespaceList
    :   "using" "namespace" namespace ( "," namespace )*
    ;

namespace
    :   PREFIX_NAME "=" FULL_URI
    ;


tableQuerySet
    :   tableQuery ( setOperator tableQuerySet )?
    ;

tableQuery
    :   "(" tableQuerySet ")"
    |   selectQuery
    ;


graphQuerySet
    :   graphQuery ( setOperator graphQuerySet )?
    ;

graphQuery
    :   "(" graphQuerySet ")"
    |   constructQuery
    ;


setOperator
    :   "union" | "minus" | "intersect"
    ;


selectQuery
    :   "select" ( "distinct" )? projection
        ( "from" ( "context" ( var | URI | bnode ) )? graphPattern )*
        ( "where" booleanExpr )?
        ( "limit" POS_INTEGER )?
        ( "offset" POS_INTEGER )?
    ;


projection
    :   "*"
    |   projectionElem ( "," projectionElem )*
    ;


projectionElem
    :   varOrValue ( "as" STRING )?
    ;


constructQuery
    :   "construct" ( "distinct" )? constructClause
        ( "from" graphPattern )?
        ( "limit" POS_INTEGER )?
        ( "offset" POS_INTEGER )?
    ;


constructClause
    :   "*"
    |   pathExprList
    ;


graphPattern
    :   pathExprList 
    ;

pathExprList
    :   pathExpr ( "," pathExpr )*
    ;

pathExpr
    :   pathExprHead ( ( ";" )? pathExprTail )?
    |   "[" graphPattern ( "where" booleanExpr )? "]"
    ;

pathExprHead
    :   node edge node
    ;

pathExprTail
    :   edge node ( ( ";" )? pathExprTail )?
    |   "[" edge node ( ( ";" )? pathExprTail )? ( "where" booleanExpr )? "]"
        ( ";" pathExprTail )?
    ;


edge
    :   var
    |   uri
    ;

node
    :   "{" ( nodeElemList )? "}"
    ;

nodeElemList
    :   nodeElem  ( "," nodeElem )*
    ;

nodeElem
    :   var
    |   uri
    |   bnode
    |   literal
    |   reifiedStat
    ;

reifiedStat
    :   node edge node
    ;


booleanExpr
    :   andExpr ( "or" booleanExpr )?
    ;

andExpr
    :   booleanElem ( "and" andExpr )?
    ;

booleanElem
    :   "(" booleanExpr ")"
    |   "true"
    |   "false"
    |   "not" booleanElem
    |   varOrValue compOp varOrValue
    |   varOrValue compOp ( "any" | "all" ) "(" tableQuerySet ")"
    |   varOrValue "like" STRING
    |   varOrValue "in" "(" tableQuerySet ")"
    |   "exists" "(" tableQuerySet ")"
    |   "isresource" "(" var ")"
    |   "isURI" "(" var ")"
    |   "isbnode" "(" var ")"
    |   "isliteral" "(" var ")"
    ;


compOp
    :   "=" | "!=" | "<" | "<=" | ">" | ">="
    ;


varOrValue
    :   var | value
    ;


var
    :   NC_NAME
    ;

value
    :   uri
    |   bnode
    |   literal
    |   "null"
    |   "datatype" "(" var ")"
    |   "lang" "(" var ")"
    |   "label" "(" var ")"
    |   "namespace" "(" var ")"
    |   "localname" "(" var ")"
    ;


uri
    :   FULL_URI
    |   QNAME
    ;


bnode
    :   BNODE
    ;


literal
    :   /* A SeRQL literal, see section on literals */
    |   POS_INTEGER
    |   NEG_INTEGER
    |   DECIMAL
    ;


FULL_URI
    :   "<" /* a legal URI, see http://www.ietf.org/rfc/rfc2396.txt */ ">"
    ;


QNAME
    :   PREFIX_NAME ":" NC_NAME_CHAR*
    ;


BNODE
    :   "_:" NC_NAME
    ;


POS_INTEGER
    :   "+"? [0-9]+
    ;

NEG_INTEGER
    :   "-" [0-9]+
    ;

DECIMAL
    :   ( "+" | "-" )? [0-9]* "." [0-9]+
    ;


STRING
    :   '"' /* zero or more (encoded) characters */ '"'
    ;


PREFIX_NAME
    :   LETTER NC_NAME_CHAR*
    |   "_" NC_NAME_CHAR+
    ;


NC_NAME
    :   (LETTER|"_") NC_NAME_CHAR*
    ;

NC_NAME_CHAR
    :   /* see http://www.w3.org/TR/REC-xml-names/#NT-NCNameChar */
    ;

LETTER
    :   /* see http://www.w3.org/TR/REC-xml/#NT-Letter */
    ;

